/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package portforward;

import java.awt.AWTException;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.io.IOException;
import java.util.*;

/**
 *
 * @author Sunnybat
 */
public class GUI extends javax.swing.JFrame {

  SystemTray tray;
  TrayIcon myIcon;
  java.awt.Image myImage;
  IconMenu menu;
  private final List<PortPanel> portPanelList = new ArrayList<>();

  /**
   * Creates new form GUI
   */
  public GUI() {
    initComponents();
    customComponents();
  }

  private void customComponents() {
    this.setLocationRelativeTo(null);
    tray = SystemTray.getSystemTray();
    menu = new IconMenu();
    try {
      myImage = javax.imageio.ImageIO.read(PortForward.class.getResourceAsStream("/resources/Icon.png"));
      setIconImage(myImage);
      myIcon = new TrayIcon(myImage, "Portfowarding Tool", menu);
      myIcon.setImageAutoSize(true);
      myIcon.addActionListener(new java.awt.event.ActionListener() {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          maximizeWindow();
        }
      });
    } catch (IOException iOException) {
      iOException.printStackTrace();
    }
    ((javax.swing.JSpinner.NumberEditor) jSpinner1.getEditor()).getTextField().setDisabledTextColor(java.awt.Color.BLACK);
  }

  public void minimizeWindow() {
    try {
      jSpinner1.commitEdit(); // Update the spinner value. If invalid, uses the last known valid value (keypresses don't update the last known value)
      if (PortForward.isPortOpen()) {
        menu.addClosePortButton((int) jSpinner1.getValue());
      } else {
        menu.addOpenPortButton((int) jSpinner1.getValue());
      }
      tray.add(myIcon);
    } catch (Exception e) {
      e.printStackTrace();
    }
    setVisible(false);
  }

  public void maximizeWindow() {
    setExtendedState(javax.swing.JFrame.NORMAL);
    setVisible(true);
    this.setLocationRelativeTo(null);
    this.toFront();
    tray.remove(myIcon);
  }

  @Override
  public void dispose() {
    PortForward.closePort();
    tray.remove(myIcon);
    super.dispose();
  }

  public void callButtonAction() {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jButton1ActionPerformed(null);
      }
    });
  }

  public void setPortStatusText(final String text) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        JLPortStatus.setText(text);
      }
    });
  }

  public void setButtonEnabled(final boolean enabled) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        jButton1.setEnabled(enabled);
      }
    });
  }

  public void addPortPanel(final PortPanel panel) {
    portPanelList.add(panel);
    JPPortPanels.add(panel);
    JPPortPanels.revalidate();
    pack();
  }

  public void removePortPanel(PortPanel panel) {
    portPanelList.remove(panel);
    JPPortPanels.remove(panel);
    JPPortPanels.revalidate();
    pack();
  }

  public void checkCheckboxes() {
    if (!JCBTCP.isSelected() && !JCBUDP.isSelected()) {
      jButton1.setEnabled(false);
      return;
    }
    Iterator<PortPanel> it = portPanelList.iterator();
    while (it.hasNext()) {
      PortPanel panel = it.next();
      if (!panel.checkBoxesValid()) {
        jButton1.setEnabled(false);
        return;
      }
    }
    jButton1.setEnabled(true);
  }

  public void setPortOptionsEnabled(boolean enable) {
    JCBTCP.setEnabled(enable);
    JCBUDP.setEnabled(enable);
    jSpinner1.setEnabled(enable);
    jButton2.setEnabled(enable);
    Iterator<PortPanel> it = portPanelList.iterator();
    while (it.hasNext()) {
      it.next().setPortOptionsEnabled(enable);
    }
  }

  public static int[] parsePanels(List<PortPanel> list) {
    Iterator<PortPanel> it = list.iterator();
    int place = 0;
    int[] tempArray = new int[list.size() * 3];
    while (it.hasNext()) {
      PortPanel panel = it.next();
      tempArray[place++] = (int) panel.jSpinner1.getValue();
      tempArray[place++] = panel.JCBTCP.isSelected() ? 1 : 0;
      tempArray[place++] = panel.JCBUDP.isSelected() ? 1 : 0;
    }
    return tempArray;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jSpinner1 = new javax.swing.JSpinner();
    jButton1 = new javax.swing.JButton();
    JLPortStatus = new javax.swing.JLabel();
    JCBTCP = new javax.swing.JCheckBox();
    JCBUDP = new javax.swing.JCheckBox();
    JPPortPanels = new javax.swing.JPanel();
    jButton2 = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowIconified(java.awt.event.WindowEvent evt) {
        formWindowIconified(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Portforwarding");

    jLabel2.setText("Port to Portforward:");

    jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 65535, 1));
    jSpinner1.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinner1, "0"));

    jButton1.setText("GO!");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    JLPortStatus.setText("Port Status:");

    JCBTCP.setSelected(true);
    JCBTCP.setText("TCP");
    JCBTCP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        JCBTCPActionPerformed(evt);
      }
    });

    JCBUDP.setSelected(true);
    JCBUDP.setText("UDP");
    JCBUDP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        JCBUDPActionPerformed(evt);
      }
    });

    JPPortPanels.setLayout(new javax.swing.BoxLayout(JPPortPanels, javax.swing.BoxLayout.Y_AXIS));

    jButton2.setText("Add a Port");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(JLPortStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(JCBTCP)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(JCBUDP)
            .addGap(18, 18, 18)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
          .addComponent(JPPortPanels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(JCBTCP)
          .addComponent(JCBUDP)
          .addComponent(jButton2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(JPPortPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(JLPortStatus)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton1)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
    if (!PortForward.isPortOpen()) {
      if (!portPanelList.isEmpty()) {
        int[] temp = parsePanels(portPanelList);
        int[] all = new int[temp.length + 3];
        all[0] = (int) jSpinner1.getValue();
        all[1] = JCBTCP.isSelected() ? 1 : 0;
        all[2] = JCBUDP.isSelected() ? 1 : 0;
        System.arraycopy(temp, 0, all, 3, temp.length);
        if (PortForward.openPorts(all)) {
          jButton1.setText("Close Port!");
        }
      } else {
        if (PortForward.openPort((int) jSpinner1.getValue(), JCBTCP.isSelected(), JCBUDP.isSelected())) {
          jButton1.setText("Close Port!");
        }
      }
    } else {
      jButton1.setText("GO!");
      PortForward.closePort();
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void JCBTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCBTCPActionPerformed
    // TODO add your handling code here:
    checkCheckboxes();
  }//GEN-LAST:event_JCBTCPActionPerformed

  private void JCBUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCBUDPActionPerformed
    // TODO add your handling code here:
    checkCheckboxes();
  }//GEN-LAST:event_JCBUDPActionPerformed

  private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
    // TODO add your handling code here:
    minimizeWindow();
  }//GEN-LAST:event_formWindowIconified

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
    addPortPanel(new PortPanel(this));
  }//GEN-LAST:event_jButton2ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox JCBTCP;
  private javax.swing.JCheckBox JCBUDP;
  private volatile javax.swing.JLabel JLPortStatus;
  private javax.swing.JPanel JPPortPanels;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private volatile javax.swing.JSpinner jSpinner1;
  // End of variables declaration//GEN-END:variables
}
